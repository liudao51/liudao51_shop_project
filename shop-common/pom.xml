<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>shop-parent</artifactId>
        <groupId>com.liudao51.shop</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../shop-parent/pom.xml</relativePath>
    </parent>

    <artifactId>shop-common</artifactId>
    <packaging>jar</packaging>
    <version>1.0-SNAPSHOT</version>
    <modelVersion>4.0.0</modelVersion>

    <dependencies>
        <!-- fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>

        <!-- org.json -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
        </dependency>

        <!-- commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <!-- guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <layout>ZIP</layout>
                    <!-- 没有该配置, devtools是不会生效 -->
                    <fork>true</fork>
                    <!--增加jvm参数-->
                    <jvmArguments>-Dfile.encoding=UTF-8</jvmArguments>
                    <!-- 当为spring-boot项目时,必须要指定该Main Class为全局的唯一入口, 用于作为命令行《java -jar xxx.jar》启动项目时的入口文件 -->
                    <mainClass>com.liudao51.shop.CommonApplication</mainClass>
                    <!--
                        因为springboot项目打包的时候会生成两个jar包：一个是普通可被引用的jar包，另一个是springboot的可执行但不可以被别的模块引用的jar包。
                        但由于默认普通jar与可执行jar包命名相同,从而导致普通jar包被可执行jar包覆盖,最终导致该模块的jar包不能被别的模块引用。
                        PS：当加上该配置后,使可执行jar包生成xxx-exec.jar形式的包,从而不覆盖普通jar,从而使用普通jar能够被别的模块正常引用。
                        参考：https://blog.csdn.net/tigerJGG/article/details/84344707
                    -->
                    <classifier>exec</classifier>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
